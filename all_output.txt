The core classes, functions, and methods that will be necessary are:

1. MainWindow.xaml.cs: This is the main window of the application. It will contain the logic for handling user input, making API calls, and displaying the response.

2. MainWindow.xaml: This is the XAML file for the main window. It will define the user interface of the application.

3. ChatGptApi.cs: This class will handle the communication with the ChatGPT API. It will have methods for sending a prompt to the API and receiving the response.

4. GlobalHotkey.cs: This class will handle the registration of the global hotkey. It will use the NHotkey library.

5. ErrorLogger.cs: This class will handle logging of errors to a text file.

Now, let's start with the entry point of the application, which is the MainWindow.xaml.cs file.

MainWindow.xaml.cs
```csharp
using System;
using System.Net.Http;
using System.Windows;
using Newtonsoft.Json;
using NHotkey;
using NHotkey.Wpf;

namespace ChatGptApp
{
    public partial class MainWindow : Window
    {
        private readonly ChatGptApi _chatGptApi;
        private readonly ErrorLogger _errorLogger;

        public MainWindow()
        {
            InitializeComponent();
            _chatGptApi = new ChatGptApi();
            _errorLogger = new ErrorLogger();

            try
            {
                HotkeyManager.Current.AddOrReplace("ShowChatGptApp", System.Windows.Input.Key.I, System.Windows.Input.ModifierKeys.Alt, OnHotKeyHandler);
            }
            catch (Exception ex)
            {
                _errorLogger.Log(ex);
            }
        }

        private void OnHotKeyHandler(object sender, HotkeyEventArgs e)
        {
            this.Show();
            e.Handled = true;
        }

        private async void GoButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var response = await _chatGptApi.SendPrompt(inputBox.Text);
                responseBox.Text = response;
            }
            catch (Exception ex)
            {
                _errorLogger.Log(ex);
                MessageBox.Show("An error occurred while processing your request. Please try again later.");
            }
        }

        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            this.Hide();
        }
    }
}
```

MainWindow.xaml
```xml
<Window x:Class="ChatGptApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="ChatGptApp" Height="100" Width="500" AllowsTransparency="True" WindowStyle="None" Background="Transparent">
    <Border Background="#AA000000" CornerRadius="10" Margin="10">
        <Grid>
            <TextBox x:Name="inputBox" Background="Transparent" Foreground="White" BorderThickness="0" Margin="10,0" VerticalContentAlignment="Center"/>
            <Button x:Name="goButton" Content="GO" Click="GoButton_Click" HorizontalAlignment="Right" Margin="0,0,10,0" VerticalAlignment="Center" Background="Transparent" Foreground="White"/>
            <Button x:Name="closeButton" Content="Close" Click="CloseButton_Click" HorizontalAlignment="Right" Margin="0,0,10,0" VerticalAlignment="Center" Background="Transparent" Foreground="White"/>
        </Grid>
    </Border>
</Window>
```

ChatGptApi.cs
```csharp
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace ChatGptApp
{
    public class ChatGptApi
    {
        private readonly HttpClient _httpClient;

        public ChatGptApi()
        {
            _httpClient = new HttpClient();
        }

        public async Task<string> SendPrompt(string prompt)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, "https://api.openai.com/v1/chat/completions");
            request.Headers.Add("Authorization", "Bearer $OPENAI_API_KEY");
            request.Content = new StringContent(JsonConvert.SerializeObject(new { model = "gpt-3.5-turbo", messages = new[] { new { role = "system", content = "You are a helpful assistant." }, new { role = "user", content = prompt } } }), Encoding.UTF8, "application/json");

            var response = await _httpClient.SendAsync(request);
            response.EnsureSuccessStatusCode();

            var responseContent = await response.Content.ReadAsStringAsync();
            var responseObject = JsonConvert.DeserializeObject<dynamic>(responseContent);

            return responseObject.choices[0].message.content;
        }
    }
}
```

GlobalHotkey.cs
```csharp
using NHotkey;
using NHotkey.Wpf;

namespace ChatGptApp
{
    public class GlobalHotkey
    {
        public static void RegisterHotkey(string name, System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifierKeys, EventHandler<HotkeyEventArgs> handler)
        {
            HotkeyManager.Current.AddOrReplace(name, key, modifierKeys, handler);
        }
    }
}
```

ErrorLogger.cs
```csharp
using System;
using System.IO;

namespace ChatGptApp
{
    public class ErrorLogger
    {
        public void Log(Exception ex)
        {
            File.AppendAllText("error.log", $"{DateTime.Now}: {ex}\n");
        }
    }
}
```

Please note that you need to replace `$OPENAI_API_KEY` with your actual OpenAI API key. Also, the error.log file will be created in the same directory as the executable file of the application. If you want to change the location of the log file, you can modify the path in the `Log` method of the `ErrorLogger` class.